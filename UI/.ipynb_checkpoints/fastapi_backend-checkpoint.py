"""
FastAPI Backend for BenefitsFlow
Handles API requests from the HTML frontend
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List, Dict, Any
import json
import os
from datetime import datetime
import io

# Import your existing modules
from rag_backend import get_rag_response, generate_checklist
from utils import extract_programs_from_conversation, get_quick_replies

# Initialize FastAPI app
app = FastAPI(
    title="BenefitsFlow API",
    description="California Benefits Navigator API",
    version="1.0.0"
)

# Add CORS middleware to allow HTML frontend to call the API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify your frontend domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models for request/response
class ChatRequest(BaseModel):
    message: str
    situation: str = None
    conversation_history: List[Dict[str, Any]] = []

class ChatResponse(BaseModel):
    response: str
    sources: List[Dict[str, str]] = []
    programs: List[str] = []

class DownloadRequest(BaseModel):
    situation: str = None
    conversation_history: List[Dict[str, Any]] = []

# API Endpoints

@app.get("/")
async def root():
    """Health check endpoint"""
    return {"message": "BenefitsFlow API is running!", "status": "healthy"}

@app.post("/chat", response_model=ChatResponse)
async def chat_endpoint(request: ChatRequest):
    """
    Main chat endpoint - handles user messages and returns AI responses
    This will connect to Deric's RAG system when ready
    """
    try:
        # For now, use demo responses
        # TODO: Replace with Deric's RAG system when ready
        response_text, sources, programs = get_rag_response(
            request.message, 
            request.conversation_history, 
            {"situation": request.situation}
        )
        
        return ChatResponse(
            response=response_text,
            sources=sources,
            programs=programs
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error processing chat: {str(e)}")

@app.post("/download/checklist")
async def download_checklist(request: DownloadRequest):
    """
    Generate and download a personalized checklist PDF
    """
    try:
        # Generate checklist using your existing logic
        checklist_data = generate_checklist(
            request.conversation_history,
            request.situation
        )
        
        # Create a simple text file (in production, use a PDF library)
        content = f"""BenefitsFlow Personalized Checklist
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Your Situation: {request.situation or 'General'}

Personalized Action Items:
{checklist_data}

Next Steps:
1. Review each item above
2. Check eligibility requirements
3. Gather required documents
4. Apply for benefits that match your situation

For more information, visit:
- BenefitsCal.com
- EDD.ca.gov
- DHCS.ca.gov

Generated by BenefitsFlow - California Benefits Navigator
"""
        
        # Create file in memory
        file_content = content.encode('utf-8')
        file_obj = io.BytesIO(file_content)
        
        return FileResponse(
            io.BytesIO(file_content),
            media_type='application/pdf',
            filename='benefits-checklist.txt',
            headers={"Content-Disposition": "attachment; filename=benefits-checklist.txt"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating checklist: {str(e)}")

@app.post("/download/calendar")
async def download_calendar(request: DownloadRequest):
    """
    Generate and download a calendar file (.ics)
    """
    try:
        # Generate calendar events based on conversation
        ics_content = f"""BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//BenefitsFlow//Benefits Calendar//EN
BEGIN:VEVENT
UID:benefitsflow-1@example.com
DTSTAMP:{datetime.now().strftime('%Y%m%dT%H%M%SZ')}
DTSTART:20250115T090000Z
DTEND:20250115T100000Z
SUMMARY:Apply for CalFresh
DESCRIPTION:Apply for CalFresh food assistance program
LOCATION:Online Application
URL:https://benefitscal.com
END:VEVENT
BEGIN:VEVENT
UID:benefitsflow-2@example.com
DTSTAMP:{datetime.now().strftime('%Y%m%dT%H%M%SZ')}
DTSTART:20250120T090000Z
DTEND:20250120T100000Z
SUMMARY:Apply for Medi-Cal
DESCRIPTION:Apply for Medi-Cal health insurance
LOCATION:Online Application
URL:https://benefitscal.com
END:VEVENT
BEGIN:VEVENT
UID:benefitsflow-3@example.com
DTSTAMP:{datetime.now().strftime('%Y%m%dT%H%M%SZ')}
DTSTART:20250125T090000Z
DTEND:20250125T100000Z
SUMMARY:Check Unemployment Benefits
DESCRIPTION:Review unemployment insurance eligibility
LOCATION:Online Application
URL:https://edd.ca.gov
END:VEVENT
END:VCALENDAR"""
        
        # Create file in memory
        file_content = ics_content.encode('utf-8')
        
        return FileResponse(
            io.BytesIO(file_content),
            media_type='text/calendar',
            filename='benefits-calendar.ics',
            headers={"Content-Disposition": "attachment; filename=benefits-calendar.ics"}
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error generating calendar: {str(e)}")

@app.get("/situations")
async def get_situations():
    """
    Get available situation types
    """
    return {
        "situations": [
            {"id": "unemployed", "name": "Unemployed", "description": "Looking for work and need immediate assistance"},
            {"id": "family", "name": "Family with Children", "description": "Supporting children and need family benefits"},
            {"id": "senior", "name": "Senior Citizen", "description": "65+ and need healthcare and assistance"},
            {"id": "disability", "name": "Disability", "description": "Living with disability and need support"},
            {"id": "student", "name": "Student", "description": "In school and need educational support"},
            {"id": "immigrant", "name": "New to California", "description": "Recently moved and need to understand benefits"}
        ]
    }

@app.get("/health")
async def health_check():
    """
    Health check endpoint
    """
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
